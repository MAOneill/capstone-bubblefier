{"version":3,"sources":["logo.svg","components/FileUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","defaults","withCredentials","FileUpload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_changeFileName","e","console","log","target","files","setState","fileName","_getFormData","preventDefault","_uploadFile","state","then","response","data","file","formData","FormData","append","post","headers","content-type","react_default","a","createElement","id","encType","name","onChange","type","accept","onClick","get","userid","Component","App","className","FileUpload_FileUpload","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uOCIxCC,IAAMC,SAASC,iBAAkB,MAEZC,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAsBdQ,gBAAkB,SAACC,GACfC,QAAQC,IAAI,qBAAsBF,EAAEG,OAAOC,OAC3CZ,EAAKa,SAAS,CACVC,SAASN,EAAEG,OAAOC,MAAM,MA1BTZ,EA6BvBe,aAAe,SAACP,GACZA,EAAEQ,iBACFhB,EAAKiB,YAAYjB,EAAKkB,MAAMJ,UACvBK,KAAK,SAACC,GACHX,QAAQC,IAAIU,EAASC,SAjCVrB,EA2CvBiB,YAAc,SAACK,GACTb,QAAQC,IAAI,wBAClB,IACMa,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAOH,GAMvB,OAAQI,eARI,eAQMH,EALH,CACXI,QAAS,CACLC,eAAgB,0BAhDhB5B,EAAKkB,MAAM,CACPJ,SAAS,MAHEd,wEAOnB,OACE6B,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,QAAMC,GAAG,SAAUC,QAAQ,uBAC5BJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,MAAMC,SAAUhC,KAAKI,gBAAiB6B,KAAK,OAAOC,OAAO,gDACrER,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASE,QAASnC,KAAKY,cAApC,4KAOQ,wBAEWpB,IAAM4C,IAFjB,uBAEJC,SACN/B,QAAQC,IAAI,uDAAwD8B,uGAtBlCC,aCWzBC,MAZf,WACE,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAGhBd,EAAAC,EAAAC,cAACa,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.d2ab9355.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nimport axios, {post} from 'axios';\n\naxios.defaults.withCredentials = true\n\nexport default class FileUpload extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            fileName:null,\n        }\n    }\n  render() {\n    return (\n      <div>\n         <form id=\"myform\"  encType=\"multipart/form-data\">\n        <input name=\"foo\" onChange={this._changeFileName} type=\"file\" accept=\"image/png, image/jpeg, image/jpg, image/gif\"></input>\n        <button type=\"submit\" onClick={this._getFormData}>Submit</button>\n        </form>\n      </div>\n    )\n  }\n\n  async componentDidMount() {\n    const url = \"/main/userid\";\n\n      const userid = await axios.get(url);\n      console.log(\"front end using axios to retrie4ve session user id: \", userid);\n  }\n_changeFileName = (e) => {\n    console.log(\"The file name is ,\", e.target.files);\n    this.setState({\n        fileName:e.target.files[0]\n    })\n}\n_getFormData = (e) => {\n    e.preventDefault();\n    this._uploadFile(this.state.fileName)\n        .then((response)=>{\n            console.log(response.data);\n        })\n\n    // console.log(\"getFormData running\")\n    // const myform = document.getElementById('myform');\n\n    // const newformdata = new FormData(myform)\n    // console.log(\"my FormData\",newformdata);\n}\n\n_uploadFile = (file) => {\n      console.log(\"_upload file running\");\nconst url = \"/main/addurl\";\nconst formData = new FormData();\nformData.append('file',file)\nconst config = {\n    headers: {\n        'content-type': 'multipart/form-data'\n    }\n}\nreturn  post(url, formData, config)\n\n\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FileUpload from './components/FileUpload'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n\n        <FileUpload />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}